Декоратор(Wrapper, Обёртка, Decorator) — это структурный паттерн проектирования, который позволяет
динамически добавлять объектам новую функциональность, оборачивая их в полезные «обёртки».
========================================================================================================================
Преимущества и недостатки
Большая гибкость, чем у наследования.
Позволяет добавлять обязанности на лету.
Можно добавлять несколько новых обязанностей сразу.
Позволяет иметь несколько мелких объектов вместо одного объекта на все случаи жизни.

Трудно конфигурировать многократно обёрнутые объекты.
Обилие крошечных классов.

Применимость: Паттерн можно часто встретить в Java-коде, особенно в коде, работающем с потоками данных.

Примеры Декораторов в стандартных библиотеках Java:

Все подклассы java.io.InputStream, OutputStream, Reader и Writer имеют конструктор, принимающий объекты этих же классов.

java.util.Collections, методы checkedXXX(), synchronizedXXX() и unmodifiableXXX().

javax.servlet.http.HttpServletRequestWrapper и HttpServletResponseWrapper

Признаки применения паттерна: Декоратор можно распознать по создающим методам, которые принимают в параметрах объекты
 того же абстрактного типа или интерфейса, что и текущий класс.